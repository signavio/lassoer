#!/usr/bin/env Rscript

suppressPackageStartupMessages(require(glue))
suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(readr))
suppressPackageStartupMessages(require(readxl))
suppressPackageStartupMessages(require(sqltypes))
suppressPackageStartupMessages(require(stringr))
options(scipen=999)

usage <- 'scrub [options] file\n
Clean-up .csv or .xls file and output result as .tsv to STDOUT'
parser <- OptionParser(usage=usage)
parser <- add_option(parser, c("-n", "--na-values"),default='',
                     help="Specify values considered to be NA")
parser <- add_option(parser, c("-f", "--schema-file"),default='',
                     help="Path to .csv schema file")
parser <- add_option(parser, c("-q", "--quote"),default='"',
                     help="Specify the character used to quote strings")
parsed <- parse_args2(parser, args = commandArgs(trailingOnly=TRUE))

prescrub <- function(file) {
  # Convert input into valid UTF-8 and ignore invalid character sequences
  to_utf8 <- 'uconv --from-callback skip --to-code UTF-8' # Remove all carriage return characters (usually used in dos style line endings)
  tr <- 'tr -d "\\r"'
  # Replace control chars (except '\t' and '\n') with single space
  sub_cntrl_chars <- 'perl -pe "s/[\\N{U+00}-\\N{U+08}\\N{U+0B}-\\N{U+1F}\\N{U+7F}]/ /g"'
  glue::glue('{to_utf8} "{file}" | {tr} | {sub_cntrl_chars}')
}
read_delim_file <- function(file, options) {
  col_types <- c()
  if (options$schema_file != '') {
    schema <- read_csv(options$schema_file,col_names=TRUE,col_types=cols())
    col_names <- c()
    data_types <- c()
    for (idx in 1:(nrow(schema)-1)) {
      col_names <- c(col_names, schema[idx,]$column_name)
      data_types <- c(data_types, list(as.cols(schema[idx,]$data_type)))
    }
    col_types <- setNames(data_types,col_names)
    write(glue::glue('With schema from file `{options$schema_file}`'), stderr())
    sink(stderr());print(as.col_spec(col_types));sink();
  }
  read_delim(file=pipe(prescrub(file)),delim=options$delimiter,col_names=TRUE,
             guess_max=1e6,escape_double=FALSE,trim_ws=TRUE,na=options$na_values,
             quote=options$quote,col_types=as.col_spec(col_types))
}
read_excel_file <- function(file, options) {
  col_types <- c()
  if (options$schema_file != '') {
    schema <- read_csv(options$schema_file,col_names=TRUE,col_types=cols())
    col_names <- c()
    data_types <- c()
    for (idx in 1:(nrow(schema)-1)) {
      col_names <- c(col_names, schema[idx,]$column_name)
      data_types <- c(data_types, list(as.cols(schema[idx,]$data_type)))
    }
    col_types <- setNames(data_types,col_names)
    write(glue::glue('With schema from file `{options$schema_file}`'), stderr())
    sink(stderr());print(as.col_spec(col_types));sink();
  }
  read_excel(file, na=options$na_values, col_names=TRUE, trim_ws=TRUE,
             guess_max=1e6, col_types=as.col_spec(col_types))
}
scrub <- function(df) {
   df %>%
      # Remove dirty, misbehaving rows
      {
         if (length(problems(df)$row) > 0)
            slice(.data=., -(problems(df)$row))
         else .
      } %>%
      # Remove duplicates
      distinct %>%
      # Prettify column names
      janitor::clean_names() %>%
      # Remove trailing backslashes to play nicely with csv parsers
      mutate_if(is.character, ~ gsub('(\\x{005c}+)$', '', ., perl=T)) %>%
      # Whitespace all control characters to play nicely with csv parsers
      mutate_if(is.character, ~ gsub('[[:cntrl:]]', ' ', ., perl=T))
}
is_excel_file <- function(file) {
  mime_type <- system2("file", c("--mime-type", shQuote(file)), stdout=TRUE)
  re <- str_c(
    "application/.*ms-excel.*|",
    "application/.*spreadsheet.*|",
    "application/.*zip.*"
  )
  str_detect(mime_type, re)
}
get_delimiter <- function(head) {
  # Return the first occurence of comma, semicolon, pipe or tab
  header <- strsplit(head, split='')[[1]]
  delim_idx <- grep('[,;\\|\t]', header)[1]
  header[delim_idx]
}

write(glue::glue('\nScrubbing {parsed$args[1]}...'), stderr())
if (is_excel_file(parsed$args[1])) {
   df <- read_excel(parsed$args[1], na=parsed$options$na_values, col_names=TRUE,
                    trim_ws=TRUE, guess_max=1e6)
   if (parsed$options$schema != '') {
    verify(spec(df), read_csv(file=parsed$options$schema))
   }
   df <- scrub(df)
} else {
   readLines(parsed$args[1],n=1)
   parsed$options$delimiter <- get_delimiter(readLines(parsed$args[1],n=1))
   df <- read_delim_file(parsed$args[1], parsed$options)
   df <- scrub(df)
}
write_tsv(df,file('/dev/stdout',raw=T),na='');

