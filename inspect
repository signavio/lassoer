#!/usr/bin/env Rscript
suppressPackageStartupMessages(require(tidyverse))
suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(sqltypes))
options(scipen=999)

#TODO use with --validate flag
compare <- function(file, schema) {
  system2("comm -12 {file} {schema}")
}
inspect <- function(file, options) {
  col_types <- spec_tsv(file=file,guess_max=1000000)
  column_types <- c()
  for (idx in 1:length(col_types$cols)) {
    column_types <- c(column_types, as.sql_ddl(col_types$cols[[idx]]))
  }
  schema <- data.frame(table_name=str_extract(file, "[^\\.]+"),
                       column_name=names(col_types$cols),
                       data_type=column_types)
  schema
}
usage <- 'inspect [options] file

Inspect a .csv file and generate a SQL DDL compatible metadata file'

parser <- OptionParser(usage=usage)
parser <- add_option(parser, c("-f", "--validate-file"),default='',
                     help="Validate against a pre-defined schema file")
parsed <- parse_args2(parser, args = commandArgs(trailingOnly=TRUE))

schema <- inspect(parsed$args[1],parsed$options)
if (parsed$options$validate != "") {
  pre_defined_schema <- read_csv(file=parsed$options$validate)
  write_csv(setdiff(schema,pre_defined_schema[do.call(order, schema),]), file('/dev/stdout', raw=T), col_names=TRUE, na='');
} else {
  write_csv(schema, file('/dev/stdout', raw=T), col_names=TRUE, na='');
}
