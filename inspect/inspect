#!/usr/bin/env Rscript
suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(readr))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(sqltypes))
suppressPackageStartupMessages(require(stringr))
options(scipen=999)

usage <- 'inspect [options] file

Inspect a .csv file and generate a SQL DDL compatible metadata file

All locale specific formatting options should be specified using
the golang reference time `Mon Jan 2 15:04:05 MST 2006` and
locale specific numeric formatting options as `8,999.99`'

parser <- OptionParser(usage=usage)
parser <- add_option(parser, c("-f", "--validate-file"),default='',
                     help="Validate against a pre-defined schema file")
parser <- add_option(parser, c("-d", "--date-format"),default='',
                     help="Locale specific date format used in the data")
parser <- add_option(parser, c("-t", "--time-format"),default='',
                     help="Locale specific time format used in the data")
parser <- add_option(parser, c("-m", "--datetime-format"),default='',
                     help="Locale specific datetime format used in the data")
parser <- add_option(parser, c("-u", "--numeric-format"),default='',
                     help="Locale specific numeric format used in the data")
parser <- add_option(parser, c("-n", "--na-values"),default='',
                     help="Specify values considered to be NA (use a semicolon to seperate multiple values)")
parsed <- parse_args2(parser, args = commandArgs(trailingOnly=TRUE))

inspect <- function(file, options) {
  locale <- get_locale(options)
  col_types <- c() 
  if (is_excel_file(file)) {
    msg <- glue::glue(str_c(
      'Unable to generate SQL DDL metadata file from an excel file\n',
      'Convert the excel file `{file}` to .tsv\n',
      'using the `scrub` utility first, then rerun this command\n'
    ))
    write(msg, stderr())
    quit(status=1)
  } else {
    delimiter <- get_delimiter(readLines(file,n=1))
    df <- read_delim(file=file,delim=delimiter,guess_max=1e6,locale=locale,
                 na=options$na_values,trim_ws=TRUE,col_types=cols(),n_max=1e6)
    col_types <- spec_with_ref_fmt(df, options)
  }
  column_types <- c()
  for (idx in 1:length(col_types$cols)) {
    column_types <- c(column_types, as.sql_ddl(col_types$cols[[idx]], locale=locale))
  }
  schema <- data.frame(table_name=str_extract(basename(file), "[^\\.]+"),
                       column_name=names(col_types$cols),
                       cleaned_name=names(janitor::clean_names(df)),
                       data_type=column_types)
  schema
}
is_excel_file <- function(file) {
  mime_type <- system2("file", c("--mime-type", shQuote(file)), stdout=TRUE)
  re <- str_c(
    "application/.*ms-excel.*|",
    "application/.*spreadsheet.*|",
    "application/.*zip.*"
  )
  str_detect(mime_type, re)
}
get_delimiter <- function(head) {
  # Return the first occurence of comma, semicolon, pipe or tab
  header <- strsplit(head, split='')[[1]]
  delim_idx <- grep('[,;\\|\t]', header)[1]
  header[delim_idx]
}
get_locale <- function(options) {
  grouping_mark = str_match(options$numeric_format, "8([:punct:])?999([:punct:])?9?9?")[2]
  loc <- list(
    date_format = as.cols(glue::glue("DATE('{options$date_format}')"))$format,
    time_format = as.cols(glue::glue("TIME('{options$time_format}')"))$format,
    decimal_mark = str_match(options$numeric_format, "8([:punct:])?999([:punct:])?9?9?")[3],
    grouping_mark = ifelse(is.na(grouping_mark), "", grouping_mark)
  )
  with_empty_options_removed <- loc[loc != "" & !is.na(loc)]
  if (length(with_empty_options_removed) == 0) return(default_locale())
  do.call(locale, with_empty_options_removed)
} 
spec_with_ref_fmt <- function(df, options) {
  spec <- spec(df)
  new_spec <- c()
  for (idx in 1:length(spec$cols)) {
    column_name <- names(spec$cols[idx])
    data_type <- class(spec$cols[[idx]])[1]
    is_date_not_empty <- !is.na(options$date_format) || options$date_format != ''
    is_time_not_empty <- !is.na(options$time_format) || options$time_format != ''
    is_datetime_not_empty <- !is.na(options$datetime_format) || options$datetime_format != ''
    new_col <- switch (
      data_type,
      "collector_date" = 
      {
        if (is_date_not_empty) {
          format <- as.cols(glue::glue('DATE("{options$date_format}")'))$format
          setNames(list(col_date(format=format)), column_name)
        } else {
          setNames(list(col_date()), column_name)
        }
      },
      "collector_time" = 
      {
        if (is_time_not_empty) {
          format <- as.cols(glue::glue('TIME("{options$time_format}")'))$format
          setNames(list(col_time(format=format)), column_name)
        } else {
          setNames(list(col_time()), column_name)
        }
      },
      "collector_datetime" =
      {
        if (is_datetime_not_empty) {
          format <- as.cols(glue::glue('TIMESTAMP("{options$datetime_format}")'))$format
          setNames(list(col_datetime(format=format)), column_name)
        } else {
          setNames(list(col_datetime()), column_name)
        }
      },
      "collector_double" =
      {
        is_whole <- function(x) isTRUE(all(floor(x) == x))
        double_or_integer <- df %>% select(all_of(column_name)) %>% filter(!is.na(.))
        if (is_whole(double_or_integer)) {
          setNames(list(col_integer()), column_name)
        } else {
          setNames(list(col_double()), column_name)
        }
      }
    )
    if (is.null(new_col)) {
      new_spec <- c(new_spec, setNames(list(spec$cols[[idx]]), column_name))
    } else {
      new_spec <- c(new_spec, new_col)
    }
  }  
  as.col_spec(new_spec)
}

parsed$options$na_values <- str_split(parsed$options$na_values, ';')[[1]]
write(glue::glue('\nInspecting {parsed$args[1]}...'), stderr())
schema <- inspect(parsed$args[1], parsed$options)
if (parsed$options$validate != "") {
  pre_defined_schema <- read_csv(file=parsed$options$validate,col_types=cols())
  write_csv(setdiff(schema,pre_defined_schema[do.call(order, schema),]), file('/dev/stdout', raw=T), col_names=TRUE, na='');
} else {
  write_delim(schema, file('/dev/stdout', raw=T), delim="|", col_names=TRUE, na='');
}
